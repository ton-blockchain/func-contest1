{-

TASK 3 - ADDRESS MEMORIZER.

The aim of address memorizer contract is to remember the address set by Manager and report it to anyone who request this information.

In particular:

* when contract get internal message from Manager with 32-bit unsigned `op` equal to 1 [more on op's here](https://ton.org/docs/#/howto/smart-contract-guidelines?id=internal-messages)
  followed by some 64-bit unsigned `query_id`,
  followed by valid MsgAddress, it should store obtained address in the storage.

* when contract get internal message from any address with 32-bit unsigned `op` equal to 2 followed by some 64-bit unsigned `query_id`, it should response to sender with message with body containing:
  1) 32-bit unsigned `op` equal to 3
  2) the same 64-bit unsigned `query_id`
  3) Manager's address
  4) Address which was memorized since last Manager request (empty address `addr_none` if there were no Manager request yet)
  5) TON value attached to message should be incoming value minus processing fees

* when address memorizer get any other message it should throw

The initial address memorizer storage contains owner address immediately followed by empty address (`addr_none` constructor for MsgAddress).

-}

int equal_slices (slice a, slice b) asm "SDEQ";

(slice, slice) load_data () {
  var ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds~load_msg_addr());
}

() save_data (slice manager_address, slice memorized_address) {
  set_data(begin_cell().store_slice(owner_address).store_slice(memorized_address).end_cell());
}

;; Parse sender address from incoming message
(slice, int) parse_sender_address (cell in_msg_full) {
  var cs = in_msg_full.begin_parse();
  var flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();
  return (sender_address, flags);
}

;; testable
() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
  (slice manager_address, slice memorized_address) = load_data();
  int op = in_msg_body~load_int(32);
  int query_id = in_msg_body~load_uint(64);
  if (op == 1) {
    save_data(manager, in_msg_body);
  }
  if (op == 2) {
    var (sender_address, _) = parse_sender_address(in_msg_full);
    var msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(sender)
          .store_grams(0)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .store_uint(3, 32)
          .store_uint(query_id, 64)
          .store_slice(manager_address)
          .store_slice(memorized_address)
        .end_cell();
     send_raw_message(msg, 0x64);
     save_data(manager_address, memorized_address);
  }
}
